bool isCheck(Pieces& currentPiece, int desired_x_space, int desired_y_space){
            //Checking to make sure no rook or queen is attacking the king vertically or horizontally
            for(int i = currentPiece.getRow(), int j = currentPiece.getRow();  i < 8, j >-8; i++, j--){                         
                //WE WE CAN MOVE TO A SPACE IF OUR COLOR DOES MATCH THE PIECE THAT IS ON THE SPACE.
                if((board[i][currentPiece.getColumn()].getColor() != currentPiece.getColor())){
                    if(board[i][currentPiece.getColumn()].getColor() != NONE){
                        if(board[i][currentPiece.getColumn()].getPiece() == ROOK || board[i][currentPiece.getColumn()].getPiece() == QUEEN){
                            return true;
                        }
                        
                    }
                }
                else if((board[j][currentPiece.getColumn()].getColor() != currentPiece.getColor())){
                    if(board[j][currentPiece.getColumn()].getColor() != NONE){
                        if(board[j][currentPiece.getColumn()].getPiece() == ROOK || board[i][currentPiece.getColumn()].getPiece() == QUEEN){
                            return true;
                        }
                        
                    }
                }
                else{
                    
                    
                }  
                        
            }
                               
                    //Same thing as row explaination but with the word row swapped with column
            for(int i = currentPiece.getColumn(), int j = currentPiece.getColumn();  i < 8, j >-8; i++, j--){                        
                            //WE WE CAN MOVE TO A SPACE IF OUR COLOR DOES MATCH THE PIECE THAT IS ON THE SPACE.
                if((board[i][currentPiece.getColumn()].getColor() != currentPiece.getColor())){
                    if(board[i][currentPiece.getColumn()].getColor() != NONE){
                        if(board[i][currentPiece.getColumn()].getPiece() == ROOK || board[i][currentPiece.getColumn()].getPiece() == QUEEN){
                            return true;
                        }
                        
                    }
                }
                else if((board[j][currentPiece.getColumn()].getColor() != currentPiece.getColor())){
                    if(board[j][currentPiece.getColumn()].getColor() != NONE){
                        if(board[j][currentPiece.getColumn()].getPiece() == ROOK || board[i][currentPiece.getColumn()].getPiece() == QUEEN){
                            return true;
                        }
                        
                    }
                }
                else{
                    
                    
                }
            
            }
            //first pass k = 0 ++
            //second pass k = 1 --
            //third pass k = 2 +-
            //fourht pass k = 3 -+
            //Checking for bishops 
            for(int k = 0; k < 3; k++){
                for(int i = currentPiece.getRow(), j = currentPiece.getColumn(); (k % 2 == 0) ? (i < 8):(i < -8),
                                    (k % 3 == 0) ? (j < 8):(j < -8); i += (k % 2 == 0)  ? 1:-1, j += (k % 3 == 0)  ? 1:-1){ //CONDITIONAL FOR LOOP IDK HOW IT FULLY WORKS TBH
                            //CONDITIONAL FOR LOOP IDK HOW IT FULLY WORKS TBH
                                
                                    //WE WE CAN MOVE TO A SPACE IF OUR COLOR DOES MATCH THE PIECE THAT IS ON THE SPACE.
                                    //IF NOTHING IS THERE WE CAN JUST MOVE THEIR IF IT IS THE OPPOSING COLOR THAT MEANS WE CAN ATTACK
                    if(board[i][j].getColor() != currentPiece.getColor()){                                
                        if(board[i][j].getColor() != NONE){
                            //THIS MEANS THAT WE ARE ATTACKING ADD IN THE ATTACKING CODE HERE
                            if(board[j][currentPiece.getColumn()].getPiece() == BISHOP || board[i][currentPiece.getColumn()].getPiece() == QUEEN){
                                return true;
                            } //TEMP
                        }
                        else{
                            //THIS MEANS THE SPACE WE WANT TO MOVE TO HAS NO PIECE ON IT. IT IS VALID TO MOVE THERE
                            
                        }                            
                    }
                    //WE ENTER THIS IF WE FIND OUT THAT THERE IS A PIECE IN THE PATH OF WHERE WE WANT TO MOVE 
                    else{
                        
                        
                    }  
                
                }
            }
            int dx[] = {-2, -1, 1, 2, -2, -1, 1, 2};   
            int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1};
            for(int i = 0; i < 8; i++){
                //IF THE PLACE THEY WANT TO MOVE TO FOLLOWS ONE OF THE PATTERNS  ABOVE THEY ARE GOOD TO MOVE THERE
                //check the radius around the king to make sure no knight is sitting ready for them to attack
                //if the color does not match ours and it is not none we know it is bad news
                    if(board[currentPiece.getRow()+dx[i]][currentPiece.getColumn() + dy[i]].getColor() != currentPiece.getColor()){
                        if(board[currentPiece.getRow()+dx[i]][currentPiece.getColumn() + dy[i]].getColor() != NONE){
                            //THIS MEANS THAT THE PIECE CAN ATTACK THE ENEMY PIECE ADD THE ATTACKING CODE HERE
                            if(board[currentPiece.getRow()+dx[i]][currentPiece.getColumn() + dy[i]].getPiece() == KNIGHT){
                                return true;
                            }
                        }
                        //THIS MEANS THAT THEY ARE JUST MOVING TO THE OTHER SQUARE
                        else{ 
                            return  true; 
                        }
                        //THIS MEANST THAT THE PLACE THEY WANTED TO MOVE TO WAS OCCUPIED BY A FRIENDLY 
                        return false;
                    }
                        
            }
            for(int i = 0; i < 8; i++){

            }
            return false;
        }
