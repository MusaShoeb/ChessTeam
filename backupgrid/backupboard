 board[0][0] = board[0][7] = Pieces(BLACK, 1, ROOK, 0, 0); // Rooks
        board[0][1] = board[0][6] = Pieces(BLACK, 0, KNIGHT, 0, 1); // Knights
        board[0][2] = board[0][5] = Pieces(BLACK, 0, BISHOP, 0, 2); // Bishops
        board[0][3] = Pieces(BLACK, 0, QUEEN, 0, 3); // Queen
        board[0][4] = Pieces(BLACK, 0, KING, 0, 4); // King
        for (int i = 0; i < 8; i++) {
            board[1][i] = Pieces(BLACK, 0, PAWN, 1, i); // print Pawnsthroughout similar happening  in next steps 
        }

        // Set up white pieces
        board[7][0] = board[7][7] = Pieces(WHITE, 1, ROOK, 7, 0); // Rooks
        board[7][1] = board[7][6] = Pieces(WHITE, 0, KNIGHT, 7, 1); // Knights
        board[7][2] = board[7][5] = Pieces(WHITE, 0, BISHOP, 7, 2); // Bishops
        board[7][3] = Pieces(WHITE, 0, QUEEN, 7, 3); // Queen
        board[7][4] = Pieces(WHITE, 0, KING, 7, 4); // King
        for (int i = 0; i < 8; i++) {
            board[6][i] = Pieces(WHITE, 0, PAWN, 6, i); // Pawns
        }

        // Set up blank spaces  /// chnage to according to contructor formatt 
        for (int row = 2; row < 6; row++) {
            for (int col = 0; col < 8; col++) {
                board[row][col] = Pieces(NONE, 0, BLANK, row, col);
            }
        }

        // Optionally, call printBoard() here to print the initial board setup
        // printBoard();
    }
